// doke san ga tsukutta kedo kore iuto doke san ga mente shinaito ikenakunaru tte ittetanode kossori noseru// http://www.libspark.org/svn/jsx/PSDExporter///--------------------------------------------------------------------------// Global Setting//--------------------------------------------------------------------------var document,    result,    baseURL,    baseDir,    currentFolder;    const LIMIT = 200;var count = 0;var offsetMargin = 0;//--------------------------------------------------------------------------// User Setting//--------------------------------------------------------------------------var useFolder = false;var TYPE_JPEG = "JPEG";var TYPE_PNG = "PNG";var saveFileFlag = true;var saveFileType = TYPE_PNG;var pngBit = 24;var jpegQuality = 100;var structureObj = [];//--------------------------------------------------------------------------// Utilities//--------------------------------------------------------------------------// filename without extensionfunction getNameRemovedExtendType(doc) {	var nameParts = String(doc.name).split(".");	var name = nameParts.splice(0, nameParts.length-1).join(".");	return name;}// string validationfunction getValidName(name){	name = name.replace(/\/$/,"");	return name.replace(/[\/\:\;\.\,\@\"\'\\]/g,"_");}// logfunction report(){	alert( result.join("\n") );}// toStringfunction toStringObj( obj ) {	switch( typeof(obj) ) {		case "object":			var result = [];			for( var i in obj ) {				result.push( i + " : "+ toStringObj(obj[i]) );			}			return "{\n"+ result.join(",\n") + "\n}";		break;		default:			return  '"' + String(obj) +'"';		break;	}}// make folderfunction createFolder( folderName ) {	currentFolder += getValidName(folderName)+"/";	if( !useFolder ) return true;	_createFolder(baseURL+currentFolder);}function _createFolder(url) {	var folder = new Folder(url);		if( folder.exists ) {		return false;	}	else {		folder.create();		return true;	}}// layer visiblityfunction setVisible(obj, bool){	var i=0, l;	switch( obj.typename ) {		//case "LayerSets":		case "Layers":			for( l=obj.length; i<l; ++i ) {				setVisible(obj[i],bool);			}		break;		case "LayerSet":			obj.visible = bool;			for( l=obj.layers.length; i<l; ++i ) {				setVisible(obj.layers[i], bool);			}		break;		default:			obj.visible = bool;			if( bool ) displayParent( obj );		break;	}}// check parentfunction displayParent(obj){	if(obj.parent){		obj.parent.visible = true;		displayParent( obj.parent );	}}// check is layersetfunction isLayerSet(obj){	return Boolean(obj.typename == "LayerSet");}// save file to pngfunction savePNG(path, name, bit) {	var exp = new ExportOptionsSaveForWeb();	exp.format = SaveDocumentType.PNG;	exp.interlaced　= false;	if(bit == 8) {		exp.PNG8 = true;	}	else {		exp.PNG8 = false;	}	fileObj = new File(  getFileName( path, name, "png") );	activeDocument.exportDocument(fileObj, ExportType.SAVEFORWEB, exp);		return fileObj.name;}// save file to jpgfunction saveJPEG(path, name, quality){	var exp = new ExportOptionsSaveForWeb();	exp.format = SaveDocumentType.JPEG;	exp.interlaced　= false;	exp.optimized= false;	exp.quality = quality;    	fileObj = new File( getFileName(path, name, "jpg"));		activeDocument.exportDocument(fileObj, ExportType.SAVEFORWEB, exp);		return fileObj.name;}// check extract file function getFileName( path, name, ext, doubleCheck ) {	if( useFolder ) {		path = baseURL + path;	}	else {		name = getValidName(path+name);		path = baseURL + baseDir;	}	var filename = [ path, name ].join("/");	var count = 0;	var newFileName = "";	newFileName = filename + "." + ext		if( !doubleCheck ) return newFileName;		var file = new File(newFileName);	while(file.exists != false){		count +=1;		newFileName = filename + count + "." + ext		file = new File(newFileName);	}	return newFileName;}//--------------------------------------------------------------------------// Main//--------------------------------------------------------------------------function main() {    preferences.rulerUnits = Units.PIXELS;        document = activeDocument;    result = [];    baseURL = String(File(document.path).fsName).replace(/\\/g, "/") + "/";    baseDir = "";    currentFolder = "";        start();}function start() {    setVisible(document.layers, false);        if ( !useFolder ) {        baseDir = getNameRemovedExtendType(document) + "/";        _createFolder(baseURL + baseDir);    }    outputLayers(document.layers, null);        structureObj.reverse();    printStructure(structureObj);        setVisible(document.layers, true);    result.push("complete");    report();}//--------------------------------------------------------------------------// Process Layerlists//--------------------------------------------------------------------------function outputLayers(layers, folder) {    if (!!folder) createFolder(folder);    for (var i = 0, l=layers.length; i < l; i++)    {        var layer = layers[i];        if (layer.typename == "LayerSet" ) {            var tmp = currentFolder;            outputLayers(layer.layers, layer.name);            currentFolder = tmp;        } else {            if (count++>LIMIT) return;            clippingLayer(layer);        }    }}//--------------------------------------------------------------------------// Process Layers//--------------------------------------------------------------------------function clippingLayer(obj) {    //書き出し準備    //setVisible(document.layers, false);    setVisible(obj, true);    //レイヤーの画像範囲を取得    var boundsObj = obj.bounds;    x1 = parseInt(boundsObj[0])-offsetMargin;    y1 = parseInt(boundsObj[1])-offsetMargin;    x2 = parseInt(boundsObj[2])+offsetMargin;    y2 = parseInt(boundsObj[3])+offsetMargin;    　//指定範囲を選択    selectReg = [[x1,y1],[x2,y1],[x2,y2],[x1,y2]];    activeDocument.selection.select(selectReg);    try {        //選択範囲を結合してコピー        activeDocument.selection.copy(true);        //選択を解除        activeDocument.selection.deselect();        //新規ドキュメントを作成        var width = x2 - x1;        var height = y2 - y1;        var resolution = 72;        var name = getValidName(obj.name);        var mode = NewDocumentMode.RGB;        var initialFill = DocumentFill.TRANSPARENT;        preferences.rulerUnits = Units.PIXELS;        newDocument = documents.add(width, height, resolution, name, mode, initialFill);        //画像をペースト        newDocument.paste();        //新規レイヤーの画像範囲を取得        var newBoundsObj = newDocument.activeLayer.bounds;        nx1 = parseInt(newBoundsObj[0])-offsetMargin;        ny1 = parseInt(newBoundsObj[1])-offsetMargin;        nx2 = parseInt(newBoundsObj[2])+offsetMargin;        ny2 = parseInt(newBoundsObj[3])+offsetMargin;        //空白がある場合は切り抜き        if((nx2 - nx1) != (x2 - x1) || (ny2 - ny1) != (y2 - y1)){            newDocument.crop(newBoundsObj);        }        //ファイルに書き出し        //*        if(saveFileFlag == true){            switch(saveFileType){                case TYPE_PNG:                     var fname = savePNG( currentFolder, name, pngBit );                break;                case TYPE_JPEG:                    var fname = saveJPEG( currentFolder, name, jpegQuality );                break;            }            structureObj.push( { filename:escape(fname),  position: [ Math.max(x1,0), Math.max(y1,0) ] }  );        }        newDocument.close( SaveOptions.DONOTSAVECHANGES );	}	catch(e){		//選択範囲に何も含まれていない場合		result.push( obj.name+": "+e.message);	}	finally{		//元のドキュメントをアクティブに設定		activeDocument = document;		setVisible(obj, false);	}}// create html & cssfunction printStructure( obj ){	var result = toStringObj( obj );	if( result == null || result == undefined ) {		alert("non result");		return;	}		var outputPath = baseURL+ baseDir;	var filePath     = outputPath;	    if(File.fs == "Windows" ) {        filePath.replace(/([A-Za-z]+)\:(.*)/,"file:///" +RegExp.$1+"|"+RegExp.$2 );        filePath = "file:///" +RegExp.$1+"|"+RegExp.$2;    }    else {        //dir.replace(/([A-Za-z]+)\:(.*)/,"file:///" +RegExp.$1+"|"+RegExp.$2 );        filePath = "file://Macintosh HD" + filePath;    }           	var outputFile = new File( outputPath+"buildup.jsfl");	outputFile.open("w");	outputFile.encoding = "utf-8";	outputFile.write([ '(function(){',	'var structure = '+result+';',    'var dir = "'+escape(baseDir)+'";',	'var baseURL = unescape("' +escape(filePath)+ '");',	'var dom       = fl.getDocumentDOM();',	'if( !dom ) {',	'	dom        = fl.createDocument();', 	'	if( !dom ) return;',	'}',	'for( var i in structure ) {',	'	var obj = structure[i];',	'	var fileUrl = baseURL + unescape(obj.filename);',	'	var x = parseInt( obj.position[0] );',	'	var y = parseInt( obj.position[1] );',	'	if( !FLfile.exists( fileUrl ) ) continue;',	'	dom.importFile( fileUrl, false );',	'	var item = dom.selection[0];',	'	item.x = x;',	'	item.y = y;',	'	dom.selectNone();',	'}',	'})()'    ].join("\n") );	outputFile.close();}main();